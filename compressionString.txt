/*compression a string like aaabbbbcc to a3b3c2
if the compression string is not smaller than the original one
return the original one*/
public String compreString(String str) {
  int size = compression(str);
  if(str.length() <= size) return str;
  
  StringBuffer newstr = new StringBuffer();
  char last = str.charAt(0);
  int count = 1;
  for(int i=1; i<str.length(); i++) {
    if(str.charAt(i) == last) {
      count++;
  }
    else {
      newstr.append(last);
      newstr.append(count);
      last = str.charAt(i);
      count = 1;
    }
}
  newstr.append(last);
  newstr.append(count);
  return newstr.toString();
}

public int compression(String str) {
  if(str == null || str.isEmpty()) return 0;
  char last = str.charAt(0);
  int count = 1;
  int size = 0;
  for(int i=1; i<str.length(); i++) {
    if(str.charAt(i) == last) {
      count++;
    }
    else {
      size = size + 1 + String.valueOf(count).length();
      last = str.charAt(i);
      count = 1;
    }
  }
  
  size = size + 1 + String.valueOf(count).length();
  return size;
}


/* use the char array */
public String compreStr(String str) {
  size = compression(str);
  if(size >= str.length()) return str;
  
  char last = str.charAt(0);
  int count = 1;
  int index = 0;
  char[] ch = new char[size];
  for(int i=1; i<str.length(); i++) {
    if(str.charAt(i) == last) {
      count++;
    }
    else {
      last = charAt(i);
      index = setIndex(ch, last, count, index);
      count = 1;
    }
  }
  index = setIndex(ch, last, count, index);
  return new String(ch);
}
 public int setIndex(char[] ch, char last, int count, int index) {
   ch[index] = last;
   index++;
   char[] ct = String.valueOf(count).toCharArray();
   for(char c: ct) {
    ch[index] = c;
    index++;
   }
  return index;
}