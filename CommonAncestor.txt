public boolean covers(TreeNode root, TreeNode p) {
  if(root == null) return false;
  if(root == p) return true;
  return (covers(root.left, p) || covers(root.right, p) )
}

public TreeNode CommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
  if(root == null) return null;
  if(root == p || root == q) return root;
  if(!covers(root, p) || !covers(root, q)) return null;
  boolean is_p_left = covers(root.left, p);
  boolean is_q_left = covers(root.left, q);
  if(is_p_left != is_q_left) return root;
  if(is_p_left) {
    TreeNode child = root.left;
    return CommonAncestor(child, p ,q);
  }
  else {
    TreeNode child = root.right;
    return CommonAncestor(child, p, q);
  }
}

public TreeNode AncestorHelper(TreeNode root, TreeNode p, TreeNode q) {
  if(root == null) return null;
  if(root == p && root == q) return root;
  TreeNode x = AncestorHelper(root.left, p, q);
  if(x != null && x != p && x!= q) return x;
  TreeNode y = AncestorHelper(root.right, p, q);
  if(y != null && y!= p && y!= q) return y;
  if(x != null && y!= null) return root;
  else if(root == p || root == q) return root;
  else return x == null ? y : x;
}